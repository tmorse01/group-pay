name: Infrastructure CI/CD

on:
  push:
    branches: [main, master]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches: [main, master]
    paths:
      - 'infrastructure/**'
  workflow_dispatch:

env:
  TF_VERSION: '1.5.0'

jobs:
  terraform-validate:
    name: 🔍 Validate Terraform
    runs-on: ubuntu-latest

    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🔍 Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: infrastructure/terraform

      - name: 🔍 Terraform Init
        run: terraform init -backend=false
        working-directory: infrastructure/terraform

      - name: 🔍 Terraform Validate
        run: terraform validate
        working-directory: infrastructure/terraform

  terraform-plan:
    name: 📋 Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request'

    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🔍 Terraform Init
        run: terraform init
        working-directory: infrastructure/terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: 📋 Terraform Plan
        run: terraform plan -no-color
        working-directory: infrastructure/terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

  terraform-apply:
    name: 🚀 Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: 🔍 Terraform Init
        run: terraform init
        working-directory: infrastructure/terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: 🚀 Terraform Apply
        run: terraform apply -auto-approve
        working-directory: infrastructure/terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: 📝 Update Environment Variables
        run: |
          # Get Terraform outputs and update GitHub secrets if needed
          API_URL=$(terraform output -raw app_service_url)
          STATIC_WEB_APP_TOKEN=$(terraform output -raw static_web_app_deployment_token)

          echo "::add-mask::$STATIC_WEB_APP_TOKEN"
          echo "API_URL=$API_URL" >> $GITHUB_ENV
          echo "STATIC_WEB_APP_TOKEN=$STATIC_WEB_APP_TOKEN" >> $GITHUB_ENV
        working-directory: infrastructure/terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
